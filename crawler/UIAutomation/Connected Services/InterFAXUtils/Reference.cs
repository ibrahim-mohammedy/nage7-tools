//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace InterFAXUtils
{


    [System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Tools.ServiceModel.Svcutil", "2.0.2")]
    [System.ServiceModel.ServiceContractAttribute(Namespace = "http://interfax.net/Utils", ConfigurationName = "InterFAXUtils.UtilsSoap")]
    public interface UtilsSoap
    {

        [System.ServiceModel.OperationContractAttribute(Action = "http://interfax.net/Utils/GetHashRawData", ReplyAction = "*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults = true)]
        System.Threading.Tasks.Task<InterFAXUtils.GetHashRawDataResponse> GetHashRawDataAsync(InterFAXUtils.GetHashRawDataRequest request);

        [System.ServiceModel.OperationContractAttribute(Action = "http://interfax.net/Utils/DeleteHashKey", ReplyAction = "*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults = true)]
        System.Threading.Tasks.Task<int> DeleteHashKeyAsync(string HashKey);

        [System.ServiceModel.OperationContractAttribute(Action = "http://interfax.net/Utils/StartSession", ReplyAction = "*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults = true)]
        System.Threading.Tasks.Task<InterFAXUtils.SessionData> StartSessionAsync(string HashKey);

        [System.ServiceModel.OperationContractAttribute(Action = "http://interfax.net/Utils/EndSession", ReplyAction = "*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults = true)]
        System.Threading.Tasks.Task<string> EndSessionAsync(string SessionKey);

        [System.ServiceModel.OperationContractAttribute(Action = "http://interfax.net/Utils/GetXMLIPVZones", ReplyAction = "*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults = true)]
        System.Threading.Tasks.Task<string> GetXMLIPVZonesAsync(string Currency, string DealerID, string DealerCountry, string Lang);

        [System.ServiceModel.OperationContractAttribute(Action = "http://interfax.net/Utils/GetXMLIPVZonesEx", ReplyAction = "*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults = true)]
        System.Threading.Tasks.Task<string> GetXMLIPVZonesExAsync(string Currency, string DealerID, string DealerCountry, string Lang, bool Secure, bool OnlyHavingInventory);

        [System.ServiceModel.OperationContractAttribute(Action = "http://interfax.net/Utils/GetXMLIPVZonesEx2", ReplyAction = "*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults = true)]
        System.Threading.Tasks.Task<string> GetXMLIPVZonesEx2Async(string BrandName, string Currency, string DealerID, string DealerCountry, string Lang, bool Secure, bool OnlyHavingInventory);

        [System.ServiceModel.OperationContractAttribute(Action = "http://interfax.net/Utils/GetCountryTimeZones", ReplyAction = "*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults = true)]
        System.Threading.Tasks.Task<string[]> GetCountryTimeZonesAsync(string CountryID);

        [System.ServiceModel.OperationContractAttribute(Action = "http://interfax.net/Utils/GetTimeZones", ReplyAction = "*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults = true)]
        System.Threading.Tasks.Task<InterFAXUtils.GetTimeZonesResponse> GetTimeZonesAsync(InterFAXUtils.GetTimeZonesRequest request);

        [System.ServiceModel.OperationContractAttribute(Action = "http://interfax.net/Utils/GetTimeZonesXML", ReplyAction = "*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults = true)]
        System.Threading.Tasks.Task<string> GetTimeZonesXMLAsync();

        [System.ServiceModel.OperationContractAttribute(Action = "http://interfax.net/Utils/GetContactsByKeys", ReplyAction = "*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults = true)]
        System.Threading.Tasks.Task<InterFAXUtils.Contacts> GetContactsByKeysAsync(string UserID, string Password, string Company, string Fax, string Person, bool OnlyPrivateLists);

        [System.ServiceModel.OperationContractAttribute(Action = "http://interfax.net/Utils/GetContacts", ReplyAction = "*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults = true)]
        System.Threading.Tasks.Task<InterFAXUtils.Contacts> GetContactsAsync(string UserID, string Password, int ListID);

        [System.ServiceModel.OperationContractAttribute(Action = "http://interfax.net/Utils/GetContactsBulk", ReplyAction = "*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults = true)]
        System.Threading.Tasks.Task<InterFAXUtils.Contacts> GetContactsBulkAsync(string UserID, string Password, int ListID, int First, int MaxCount);

        [System.ServiceModel.OperationContractAttribute(Action = "http://interfax.net/Utils/GetContact", ReplyAction = "*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults = true)]
        System.Threading.Tasks.Task<InterFAXUtils.ContactResult> GetContactAsync(string UserID, string Password, int ContactID);

        [System.ServiceModel.OperationContractAttribute(Action = "http://interfax.net/Utils/GetContactList", ReplyAction = "*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults = true)]
        System.Threading.Tasks.Task<InterFAXUtils.ContactListResult> GetContactListAsync(string UserID, string Password, int ListID);

        [System.ServiceModel.OperationContractAttribute(Action = "http://interfax.net/Utils/GetContactLists", ReplyAction = "*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults = true)]
        System.Threading.Tasks.Task<InterFAXUtils.ContactsLists> GetContactListsAsync(string UserID, string Password, bool OnlyPrivate);

        [System.ServiceModel.OperationContractAttribute(Action = "http://interfax.net/Utils/UpdateContact", ReplyAction = "*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults = true)]
        System.Threading.Tasks.Task<int> UpdateContactAsync(string Username, string Password, InterFAXUtils.Contact Contact);

        [System.ServiceModel.OperationContractAttribute(Action = "http://interfax.net/Utils/UpdateContactList", ReplyAction = "*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults = true)]
        System.Threading.Tasks.Task<int> UpdateContactListAsync(string Username, string Password, InterFAXUtils.ContactList ContactList);

        [System.ServiceModel.OperationContractAttribute(Action = "http://interfax.net/Utils/AddContacts", ReplyAction = "*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults = true)]
        System.Threading.Tasks.Task<InterFAXUtils.AddContactsResponse> AddContactsAsync(InterFAXUtils.AddContactsRequest request);

        [System.ServiceModel.OperationContractAttribute(Action = "http://interfax.net/Utils/AddContact", ReplyAction = "*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults = true)]
        System.Threading.Tasks.Task<int> AddContactAsync(string Username, string Password, InterFAXUtils.Contact Contact);

        [System.ServiceModel.OperationContractAttribute(Action = "http://interfax.net/Utils/AddContactList", ReplyAction = "*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults = true)]
        System.Threading.Tasks.Task<InterFAXUtils.ContactListResult> AddContactListAsync(string Username, string Password, InterFAXUtils.ContactList ContactList);

        [System.ServiceModel.OperationContractAttribute(Action = "http://interfax.net/Utils/RemoveContact", ReplyAction = "*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults = true)]
        System.Threading.Tasks.Task<int> RemoveContactAsync(string Username, string Password, int ContactID);

        [System.ServiceModel.OperationContractAttribute(Action = "http://interfax.net/Utils/RemoveContactList", ReplyAction = "*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults = true)]
        System.Threading.Tasks.Task<int> RemoveContactListAsync(string Username, string Password, int ContactListID);

        [System.ServiceModel.OperationContractAttribute(Action = "http://interfax.net/Utils/GetAllErrorCodes", ReplyAction = "*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults = true)]
        System.Threading.Tasks.Task<InterFAXUtils.ErrorMessage[]> GetAllErrorCodesAsync();

        [System.ServiceModel.OperationContractAttribute(Action = "http://interfax.net/Utils/GetErrorDescription", ReplyAction = "*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults = true)]
        System.Threading.Tasks.Task<string> GetErrorDescriptionAsync(int code);
    }

    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Tools.ServiceModel.Svcutil", "2.0.2")]
    [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
    [System.ServiceModel.MessageContractAttribute(WrapperName = "GetHashRawData", WrapperNamespace = "http://interfax.net/Utils", IsWrapped = true)]
    public partial class GetHashRawDataRequest
    {

        [System.ServiceModel.MessageBodyMemberAttribute(Namespace = "http://interfax.net/Utils", Order = 0)]
        public string HashKey;

        public GetHashRawDataRequest()
        {
        }

        public GetHashRawDataRequest(string HashKey)
        {
            this.HashKey = HashKey;
        }
    }

    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Tools.ServiceModel.Svcutil", "2.0.2")]
    [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
    [System.ServiceModel.MessageContractAttribute(WrapperName = "GetHashRawDataResponse", WrapperNamespace = "http://interfax.net/Utils", IsWrapped = true)]
    public partial class GetHashRawDataResponse
    {

        [System.ServiceModel.MessageBodyMemberAttribute(Namespace = "http://interfax.net/Utils", Order = 0)]
        [System.Xml.Serialization.XmlElementAttribute(DataType = "base64Binary")]
        public byte[] GetHashRawDataResult;

        public GetHashRawDataResponse()
        {
        }

        public GetHashRawDataResponse(byte[] GetHashRawDataResult)
        {
            this.GetHashRawDataResult = GetHashRawDataResult;
        }
    }

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Tools.ServiceModel.Svcutil", "2.0.2")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace = "http://interfax.net/Utils")]
    public partial class SessionData
    {

        private string sessionKeyField;

        private byte[] hashDataField;

        private int returnCodeField;

        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order = 0)]
        public string SessionKey
        {
            get
            {
                return this.sessionKeyField;
            }
            set
            {
                this.sessionKeyField = value;
            }
        }

        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(DataType = "base64Binary", Order = 1)]
        public byte[] HashData
        {
            get
            {
                return this.hashDataField;
            }
            set
            {
                this.hashDataField = value;
            }
        }

        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order = 2)]
        public int ReturnCode
        {
            get
            {
                return this.returnCodeField;
            }
            set
            {
                this.returnCodeField = value;
            }
        }
    }

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Tools.ServiceModel.Svcutil", "2.0.2")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace = "http://interfax.net/Utils")]
    public partial class ErrorMessage
    {

        private int codeField;

        private string descriptionField;

        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order = 0)]
        public int Code
        {
            get
            {
                return this.codeField;
            }
            set
            {
                this.codeField = value;
            }
        }

        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order = 1)]
        public string Description
        {
            get
            {
                return this.descriptionField;
            }
            set
            {
                this.descriptionField = value;
            }
        }
    }

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Tools.ServiceModel.Svcutil", "2.0.2")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace = "http://interfax.net/Utils")]
    public partial class AddContactsResult
    {

        private int totalAddedField;

        private int firstErrorLineResultCodeField;

        private int firstErrorLineNumberField;

        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order = 0)]
        public int TotalAdded
        {
            get
            {
                return this.totalAddedField;
            }
            set
            {
                this.totalAddedField = value;
            }
        }

        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order = 1)]
        public int FirstErrorLineResultCode
        {
            get
            {
                return this.firstErrorLineResultCodeField;
            }
            set
            {
                this.firstErrorLineResultCodeField = value;
            }
        }

        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order = 2)]
        public int FirstErrorLineNumber
        {
            get
            {
                return this.firstErrorLineNumberField;
            }
            set
            {
                this.firstErrorLineNumberField = value;
            }
        }
    }

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Tools.ServiceModel.Svcutil", "2.0.2")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace = "http://interfax.net/Utils")]
    public partial class ContactsLists
    {

        private ContactList[] listsField;

        private int resultCodeField;

        /// <remarks/>
        [System.Xml.Serialization.XmlArrayAttribute(Order = 0)]
        [System.Xml.Serialization.XmlArrayItemAttribute(IsNullable = false)]
        public ContactList[] Lists
        {
            get
            {
                return this.listsField;
            }
            set
            {
                this.listsField = value;
            }
        }

        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order = 1)]
        public int ResultCode
        {
            get
            {
                return this.resultCodeField;
            }
            set
            {
                this.resultCodeField = value;
            }
        }
    }

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Tools.ServiceModel.Svcutil", "2.0.2")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace = "http://interfax.net/Utils")]
    public partial class ContactList
    {

        private string userIDField;

        private bool isPrivateField;

        private int contactListIDField;

        private string listNameField;

        private bool includedInForwardListsField;

        private int numOfContactsField;

        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order = 0)]
        public string UserID
        {
            get
            {
                return this.userIDField;
            }
            set
            {
                this.userIDField = value;
            }
        }

        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order = 1)]
        public bool IsPrivate
        {
            get
            {
                return this.isPrivateField;
            }
            set
            {
                this.isPrivateField = value;
            }
        }

        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order = 2)]
        public int ContactListID
        {
            get
            {
                return this.contactListIDField;
            }
            set
            {
                this.contactListIDField = value;
            }
        }

        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order = 3)]
        public string ListName
        {
            get
            {
                return this.listNameField;
            }
            set
            {
                this.listNameField = value;
            }
        }

        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order = 4)]
        public bool IncludedInForwardLists
        {
            get
            {
                return this.includedInForwardListsField;
            }
            set
            {
                this.includedInForwardListsField = value;
            }
        }

        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order = 5)]
        public int NumOfContacts
        {
            get
            {
                return this.numOfContactsField;
            }
            set
            {
                this.numOfContactsField = value;
            }
        }
    }

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Tools.ServiceModel.Svcutil", "2.0.2")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace = "http://interfax.net/Utils")]
    public partial class ContactListResult
    {

        private ContactList contactListField;

        private int resultCodeField;

        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order = 0)]
        public ContactList ContactList
        {
            get
            {
                return this.contactListField;
            }
            set
            {
                this.contactListField = value;
            }
        }

        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order = 1)]
        public int ResultCode
        {
            get
            {
                return this.resultCodeField;
            }
            set
            {
                this.resultCodeField = value;
            }
        }
    }

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Tools.ServiceModel.Svcutil", "2.0.2")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace = "http://interfax.net/Utils")]
    public partial class ContactResult
    {

        private Contact contactField;

        private int resultCodeField;

        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order = 0)]
        public Contact Contact
        {
            get
            {
                return this.contactField;
            }
            set
            {
                this.contactField = value;
            }
        }

        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order = 1)]
        public int ResultCode
        {
            get
            {
                return this.resultCodeField;
            }
            set
            {
                this.resultCodeField = value;
            }
        }
    }

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Tools.ServiceModel.Svcutil", "2.0.2")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace = "http://interfax.net/Utils")]
    public partial class Contact
    {

        private int contactListIDField;

        private string contactListNameField;

        private int contactIDField;

        private ContactPropertyValue[] propertiesValuesField;

        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order = 0)]
        public int ContactListID
        {
            get
            {
                return this.contactListIDField;
            }
            set
            {
                this.contactListIDField = value;
            }
        }

        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order = 1)]
        public string ContactListName
        {
            get
            {
                return this.contactListNameField;
            }
            set
            {
                this.contactListNameField = value;
            }
        }

        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order = 2)]
        public int ContactID
        {
            get
            {
                return this.contactIDField;
            }
            set
            {
                this.contactIDField = value;
            }
        }

        /// <remarks/>
        [System.Xml.Serialization.XmlArrayAttribute(Order = 3)]
        [System.Xml.Serialization.XmlArrayItemAttribute(IsNullable = false)]
        public ContactPropertyValue[] PropertiesValues
        {
            get
            {
                return this.propertiesValuesField;
            }
            set
            {
                this.propertiesValuesField = value;
            }
        }
    }

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Tools.ServiceModel.Svcutil", "2.0.2")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace = "http://interfax.net/Utils")]
    public partial class ContactPropertyValue
    {

        private string nameField;

        private string valueField;

        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order = 0)]
        public string Name
        {
            get
            {
                return this.nameField;
            }
            set
            {
                this.nameField = value;
            }
        }

        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order = 1)]
        public string Value
        {
            get
            {
                return this.valueField;
            }
            set
            {
                this.valueField = value;
            }
        }
    }

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Tools.ServiceModel.Svcutil", "2.0.2")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace = "http://interfax.net/Utils")]
    public partial class Contacts
    {

        private Contact[] listField;

        private int resultCodeField;

        /// <remarks/>
        [System.Xml.Serialization.XmlArrayAttribute(Order = 0)]
        [System.Xml.Serialization.XmlArrayItemAttribute(IsNullable = false)]
        public Contact[] List
        {
            get
            {
                return this.listField;
            }
            set
            {
                this.listField = value;
            }
        }

        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order = 1)]
        public int ResultCode
        {
            get
            {
                return this.resultCodeField;
            }
            set
            {
                this.resultCodeField = value;
            }
        }
    }

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Tools.ServiceModel.Svcutil", "2.0.2")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace = "http://interfax.net/Utils")]
    public partial class TimeZoneElement
    {

        private string nameField;

        private int gMTOffsetField;

        private string gMTOffsetDisplayField;

        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order = 0)]
        public string Name
        {
            get
            {
                return this.nameField;
            }
            set
            {
                this.nameField = value;
            }
        }

        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order = 1)]
        public int GMTOffset
        {
            get
            {
                return this.gMTOffsetField;
            }
            set
            {
                this.gMTOffsetField = value;
            }
        }

        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order = 2)]
        public string GMTOffsetDisplay
        {
            get
            {
                return this.gMTOffsetDisplayField;
            }
            set
            {
                this.gMTOffsetDisplayField = value;
            }
        }
    }

    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Tools.ServiceModel.Svcutil", "2.0.2")]
    [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
    [System.ServiceModel.MessageContractAttribute(WrapperName = "GetTimeZones", WrapperNamespace = "http://interfax.net/Utils", IsWrapped = true)]
    public partial class GetTimeZonesRequest
    {

        public GetTimeZonesRequest()
        {
        }
    }

    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Tools.ServiceModel.Svcutil", "2.0.2")]
    [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
    [System.ServiceModel.MessageContractAttribute(WrapperName = "GetTimeZonesResponse", WrapperNamespace = "http://interfax.net/Utils", IsWrapped = true)]
    public partial class GetTimeZonesResponse
    {

        [System.ServiceModel.MessageBodyMemberAttribute(Namespace = "http://interfax.net/Utils", Order = 0)]
        [System.Xml.Serialization.XmlArrayItemAttribute(IsNullable = false)]
        public InterFAXUtils.TimeZoneElement[] GetTimeZonesResult;

        public GetTimeZonesResponse()
        {
        }

        public GetTimeZonesResponse(InterFAXUtils.TimeZoneElement[] GetTimeZonesResult)
        {
            this.GetTimeZonesResult = GetTimeZonesResult;
        }
    }

    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Tools.ServiceModel.Svcutil", "2.0.2")]
    [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
    [System.ServiceModel.MessageContractAttribute(WrapperName = "AddContacts", WrapperNamespace = "http://interfax.net/Utils", IsWrapped = true)]
    public partial class AddContactsRequest
    {

        [System.ServiceModel.MessageBodyMemberAttribute(Namespace = "http://interfax.net/Utils", Order = 0)]
        public string Username;

        [System.ServiceModel.MessageBodyMemberAttribute(Namespace = "http://interfax.net/Utils", Order = 1)]
        public string Password;

        [System.ServiceModel.MessageBodyMemberAttribute(Namespace = "http://interfax.net/Utils", Order = 2)]
        public int ContactListID;

        [System.ServiceModel.MessageBodyMemberAttribute(Namespace = "http://interfax.net/Utils", Order = 3)]
        public bool SkipDuplicates;

        [System.ServiceModel.MessageBodyMemberAttribute(Namespace = "http://interfax.net/Utils", Order = 4)]
        [System.Xml.Serialization.XmlArrayItemAttribute("ArrayOfContactPropertyValue")]
        [System.Xml.Serialization.XmlArrayItemAttribute(IsNullable = false, NestingLevel = 1)]
        public InterFAXUtils.ContactPropertyValue[][] Contacts;

        public AddContactsRequest()
        {
        }

        public AddContactsRequest(string Username, string Password, int ContactListID, bool SkipDuplicates, InterFAXUtils.ContactPropertyValue[][] Contacts)
        {
            this.Username = Username;
            this.Password = Password;
            this.ContactListID = ContactListID;
            this.SkipDuplicates = SkipDuplicates;
            this.Contacts = Contacts;
        }
    }

    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Tools.ServiceModel.Svcutil", "2.0.2")]
    [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
    [System.ServiceModel.MessageContractAttribute(WrapperName = "AddContactsResponse", WrapperNamespace = "http://interfax.net/Utils", IsWrapped = true)]
    public partial class AddContactsResponse
    {

        [System.ServiceModel.MessageBodyMemberAttribute(Namespace = "http://interfax.net/Utils", Order = 0)]
        public InterFAXUtils.AddContactsResult AddContactsResult;

        public AddContactsResponse()
        {
        }

        public AddContactsResponse(InterFAXUtils.AddContactsResult AddContactsResult)
        {
            this.AddContactsResult = AddContactsResult;
        }
    }

    [System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Tools.ServiceModel.Svcutil", "2.0.2")]
    public interface UtilsSoapChannel : InterFAXUtils.UtilsSoap, System.ServiceModel.IClientChannel
    {
    }

    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Tools.ServiceModel.Svcutil", "2.0.2")]
    public partial class UtilsSoapClient : System.ServiceModel.ClientBase<InterFAXUtils.UtilsSoap>, InterFAXUtils.UtilsSoap
    {

        /// <summary>
        /// Implement this partial method to configure the service endpoint.
        /// </summary>
        /// <param name="serviceEndpoint">The endpoint to configure</param>
        /// <param name="clientCredentials">The client credentials</param>
        static partial void ConfigureEndpoint(System.ServiceModel.Description.ServiceEndpoint serviceEndpoint, System.ServiceModel.Description.ClientCredentials clientCredentials);

        public UtilsSoapClient(EndpointConfiguration endpointConfiguration) :
                base(UtilsSoapClient.GetBindingForEndpoint(endpointConfiguration), UtilsSoapClient.GetEndpointAddress(endpointConfiguration))
        {
            this.Endpoint.Name = endpointConfiguration.ToString();
            ConfigureEndpoint(this.Endpoint, this.ClientCredentials);
        }

        public UtilsSoapClient(EndpointConfiguration endpointConfiguration, string remoteAddress) :
                base(UtilsSoapClient.GetBindingForEndpoint(endpointConfiguration), new System.ServiceModel.EndpointAddress(remoteAddress))
        {
            this.Endpoint.Name = endpointConfiguration.ToString();
            ConfigureEndpoint(this.Endpoint, this.ClientCredentials);
        }

        public UtilsSoapClient(EndpointConfiguration endpointConfiguration, System.ServiceModel.EndpointAddress remoteAddress) :
                base(UtilsSoapClient.GetBindingForEndpoint(endpointConfiguration), remoteAddress)
        {
            this.Endpoint.Name = endpointConfiguration.ToString();
            ConfigureEndpoint(this.Endpoint, this.ClientCredentials);
        }

        public UtilsSoapClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) :
                base(binding, remoteAddress)
        {
        }

        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.Threading.Tasks.Task<InterFAXUtils.GetHashRawDataResponse> InterFAXUtils.UtilsSoap.GetHashRawDataAsync(InterFAXUtils.GetHashRawDataRequest request)
        {
            return base.Channel.GetHashRawDataAsync(request);
        }

        public System.Threading.Tasks.Task<InterFAXUtils.GetHashRawDataResponse> GetHashRawDataAsync(string HashKey)
        {
            InterFAXUtils.GetHashRawDataRequest inValue = new InterFAXUtils.GetHashRawDataRequest();
            inValue.HashKey = HashKey;
            return ((InterFAXUtils.UtilsSoap)(this)).GetHashRawDataAsync(inValue);
        }

        public System.Threading.Tasks.Task<int> DeleteHashKeyAsync(string HashKey)
        {
            return base.Channel.DeleteHashKeyAsync(HashKey);
        }

        public System.Threading.Tasks.Task<InterFAXUtils.SessionData> StartSessionAsync(string HashKey)
        {
            return base.Channel.StartSessionAsync(HashKey);
        }

        public System.Threading.Tasks.Task<string> EndSessionAsync(string SessionKey)
        {
            return base.Channel.EndSessionAsync(SessionKey);
        }

        public System.Threading.Tasks.Task<string> GetXMLIPVZonesAsync(string Currency, string DealerID, string DealerCountry, string Lang)
        {
            return base.Channel.GetXMLIPVZonesAsync(Currency, DealerID, DealerCountry, Lang);
        }

        public System.Threading.Tasks.Task<string> GetXMLIPVZonesExAsync(string Currency, string DealerID, string DealerCountry, string Lang, bool Secure, bool OnlyHavingInventory)
        {
            return base.Channel.GetXMLIPVZonesExAsync(Currency, DealerID, DealerCountry, Lang, Secure, OnlyHavingInventory);
        }

        public System.Threading.Tasks.Task<string> GetXMLIPVZonesEx2Async(string BrandName, string Currency, string DealerID, string DealerCountry, string Lang, bool Secure, bool OnlyHavingInventory)
        {
            return base.Channel.GetXMLIPVZonesEx2Async(BrandName, Currency, DealerID, DealerCountry, Lang, Secure, OnlyHavingInventory);
        }

        public System.Threading.Tasks.Task<string[]> GetCountryTimeZonesAsync(string CountryID)
        {
            return base.Channel.GetCountryTimeZonesAsync(CountryID);
        }

        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.Threading.Tasks.Task<InterFAXUtils.GetTimeZonesResponse> InterFAXUtils.UtilsSoap.GetTimeZonesAsync(InterFAXUtils.GetTimeZonesRequest request)
        {
            return base.Channel.GetTimeZonesAsync(request);
        }

        public System.Threading.Tasks.Task<InterFAXUtils.GetTimeZonesResponse> GetTimeZonesAsync()
        {
            InterFAXUtils.GetTimeZonesRequest inValue = new InterFAXUtils.GetTimeZonesRequest();
            return ((InterFAXUtils.UtilsSoap)(this)).GetTimeZonesAsync(inValue);
        }

        public System.Threading.Tasks.Task<string> GetTimeZonesXMLAsync()
        {
            return base.Channel.GetTimeZonesXMLAsync();
        }

        public System.Threading.Tasks.Task<InterFAXUtils.Contacts> GetContactsByKeysAsync(string UserID, string Password, string Company, string Fax, string Person, bool OnlyPrivateLists)
        {
            return base.Channel.GetContactsByKeysAsync(UserID, Password, Company, Fax, Person, OnlyPrivateLists);
        }

        public System.Threading.Tasks.Task<InterFAXUtils.Contacts> GetContactsAsync(string UserID, string Password, int ListID)
        {
            return base.Channel.GetContactsAsync(UserID, Password, ListID);
        }

        public System.Threading.Tasks.Task<InterFAXUtils.Contacts> GetContactsBulkAsync(string UserID, string Password, int ListID, int First, int MaxCount)
        {
            return base.Channel.GetContactsBulkAsync(UserID, Password, ListID, First, MaxCount);
        }

        public System.Threading.Tasks.Task<InterFAXUtils.ContactResult> GetContactAsync(string UserID, string Password, int ContactID)
        {
            return base.Channel.GetContactAsync(UserID, Password, ContactID);
        }

        public System.Threading.Tasks.Task<InterFAXUtils.ContactListResult> GetContactListAsync(string UserID, string Password, int ListID)
        {
            return base.Channel.GetContactListAsync(UserID, Password, ListID);
        }

        public System.Threading.Tasks.Task<InterFAXUtils.ContactsLists> GetContactListsAsync(string UserID, string Password, bool OnlyPrivate)
        {
            return base.Channel.GetContactListsAsync(UserID, Password, OnlyPrivate);
        }

        public System.Threading.Tasks.Task<int> UpdateContactAsync(string Username, string Password, InterFAXUtils.Contact Contact)
        {
            return base.Channel.UpdateContactAsync(Username, Password, Contact);
        }

        public System.Threading.Tasks.Task<int> UpdateContactListAsync(string Username, string Password, InterFAXUtils.ContactList ContactList)
        {
            return base.Channel.UpdateContactListAsync(Username, Password, ContactList);
        }

        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.Threading.Tasks.Task<InterFAXUtils.AddContactsResponse> InterFAXUtils.UtilsSoap.AddContactsAsync(InterFAXUtils.AddContactsRequest request)
        {
            return base.Channel.AddContactsAsync(request);
        }

        public System.Threading.Tasks.Task<InterFAXUtils.AddContactsResponse> AddContactsAsync(string Username, string Password, int ContactListID, bool SkipDuplicates, InterFAXUtils.ContactPropertyValue[][] Contacts)
        {
            InterFAXUtils.AddContactsRequest inValue = new InterFAXUtils.AddContactsRequest();
            inValue.Username = Username;
            inValue.Password = Password;
            inValue.ContactListID = ContactListID;
            inValue.SkipDuplicates = SkipDuplicates;
            inValue.Contacts = Contacts;
            return ((InterFAXUtils.UtilsSoap)(this)).AddContactsAsync(inValue);
        }

        public System.Threading.Tasks.Task<int> AddContactAsync(string Username, string Password, InterFAXUtils.Contact Contact)
        {
            return base.Channel.AddContactAsync(Username, Password, Contact);
        }

        public System.Threading.Tasks.Task<InterFAXUtils.ContactListResult> AddContactListAsync(string Username, string Password, InterFAXUtils.ContactList ContactList)
        {
            return base.Channel.AddContactListAsync(Username, Password, ContactList);
        }

        public System.Threading.Tasks.Task<int> RemoveContactAsync(string Username, string Password, int ContactID)
        {
            return base.Channel.RemoveContactAsync(Username, Password, ContactID);
        }

        public System.Threading.Tasks.Task<int> RemoveContactListAsync(string Username, string Password, int ContactListID)
        {
            return base.Channel.RemoveContactListAsync(Username, Password, ContactListID);
        }

        public System.Threading.Tasks.Task<InterFAXUtils.ErrorMessage[]> GetAllErrorCodesAsync()
        {
            return base.Channel.GetAllErrorCodesAsync();
        }

        public System.Threading.Tasks.Task<string> GetErrorDescriptionAsync(int code)
        {
            return base.Channel.GetErrorDescriptionAsync(code);
        }

        public virtual System.Threading.Tasks.Task OpenAsync()
        {
            return System.Threading.Tasks.Task.Factory.FromAsync(((System.ServiceModel.ICommunicationObject)(this)).BeginOpen(null, null), new System.Action<System.IAsyncResult>(((System.ServiceModel.ICommunicationObject)(this)).EndOpen));
        }

        public virtual System.Threading.Tasks.Task CloseAsync()
        {
            return System.Threading.Tasks.Task.Factory.FromAsync(((System.ServiceModel.ICommunicationObject)(this)).BeginClose(null, null), new System.Action<System.IAsyncResult>(((System.ServiceModel.ICommunicationObject)(this)).EndClose));
        }

        private static System.ServiceModel.Channels.Binding GetBindingForEndpoint(EndpointConfiguration endpointConfiguration)
        {
            if ((endpointConfiguration == EndpointConfiguration.UtilsSoap))
            {
                System.ServiceModel.BasicHttpBinding result = new System.ServiceModel.BasicHttpBinding();
                result.MaxBufferSize = int.MaxValue;
                result.ReaderQuotas = System.Xml.XmlDictionaryReaderQuotas.Max;
                result.MaxReceivedMessageSize = int.MaxValue;
                result.AllowCookies = true;
                result.Security.Mode = System.ServiceModel.BasicHttpSecurityMode.Transport;
                return result;
            }
            if ((endpointConfiguration == EndpointConfiguration.UtilsSoap12))
            {
                System.ServiceModel.Channels.CustomBinding result = new System.ServiceModel.Channels.CustomBinding();
                System.ServiceModel.Channels.TextMessageEncodingBindingElement textBindingElement = new System.ServiceModel.Channels.TextMessageEncodingBindingElement();
                textBindingElement.MessageVersion = System.ServiceModel.Channels.MessageVersion.CreateVersion(System.ServiceModel.EnvelopeVersion.Soap12, System.ServiceModel.Channels.AddressingVersion.None);
                result.Elements.Add(textBindingElement);
                System.ServiceModel.Channels.HttpsTransportBindingElement httpsBindingElement = new System.ServiceModel.Channels.HttpsTransportBindingElement();
                httpsBindingElement.AllowCookies = true;
                httpsBindingElement.MaxBufferSize = int.MaxValue;
                httpsBindingElement.MaxReceivedMessageSize = int.MaxValue;
                result.Elements.Add(httpsBindingElement);
                return result;
            }
            throw new System.InvalidOperationException(string.Format("Could not find endpoint with name \'{0}\'.", endpointConfiguration));
        }

        private static System.ServiceModel.EndpointAddress GetEndpointAddress(EndpointConfiguration endpointConfiguration)
        {
            if ((endpointConfiguration == EndpointConfiguration.UtilsSoap))
            {
                return new System.ServiceModel.EndpointAddress("https://ws.interfax.net/utils.asmx");
            }
            if ((endpointConfiguration == EndpointConfiguration.UtilsSoap12))
            {
                return new System.ServiceModel.EndpointAddress("https://ws.interfax.net/utils.asmx");
            }
            throw new System.InvalidOperationException(string.Format("Could not find endpoint with name \'{0}\'.", endpointConfiguration));
        }

        public enum EndpointConfiguration
        {

            UtilsSoap,

            UtilsSoap12,
        }
    }
}
